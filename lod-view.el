(defun create-lod-viewer (sObj)
  (interactive "sLod Name: " sObj)
  (setq sObjName sObj)
  (message "Loading LOD: %s" sObjName)
  (setq sObjBuf (concat sObjName ".XOD"))
  (setq sObjPath (concat "C:\\lplr\\cheetah\\bin\\" sObjName ".XOD"))
  (if (not (bufferp sObjBuf))
      (find-file-noselect sObjPath))    
  (create-lod-view-buffer)
)

(defun create-lod-view-buffer ()
  (setq sLodView (concat "*LOD " sObjName " View*"))
  (if (get-buffer sLodView)
      (kill-buffer sLodView))
  (generate-new-buffer sLodView)
  (switch-to-buffer-other-window sLodView)
  (goto-char (point-min))
  (insert "--------------------------------------------------------------------------\n")
  (insert " Logical Object Definition Viewer for Emacs\n")
  (insert "--------------------------------------------------------------------------\n")
  (insert " Viewing LOD: " sObjName ".LOD\n")
  (insert "--------------------------------------------------------------------------\n\n")
  (get-parent-friendly-name)
  (generate-parent-entity)
)

(defun get-parent-friendly-name ()
  (if (not (bufferp sObjBuf))
      (set-buffer sObjBuf))

  (goto-char (point-min))
  (search-forward "eENTITY")
  (search-forward "aNAME")
  (skip-chars-forward " ")
  (setq sParentName (extract-word))
)

(defun generate-parent-entity ()
  (if (not (bufferp sLodView))
      (set-buffer sLodView))
  (insert "Parent Entity: " sParentName)
  (insert "\n---\n\tTODO: Properties for parent\n---\n")
  (insert "Attributes\n")
  (get-entity-attributes sParentName)
)

(defun get-entity-attributes (sEntityName)
  (if (not (bufferp sObjBuf))
      (set-buffer sObjBuf))
  (goto-char 1)

  (while (search-forward "eCHILDENTITY" nil t)
    (search-forward "aNAME")
    (skip-chars-forward " ")
    (setq sEntityName (extract-word))
    (set-buffer sLodView)
    (goto-char (point-max))
    (insert "\n---\n\t"sEntityName "\n---\n")
    (set-buffer sObjBuf)
    (while (search-forward "eATTRIB")
      (search-forward "aNAME")
      (skip-chars-forward " ")
      (setq sAttrName (extract-word))
      (set-buffer sLodView)
      (goto-char (point-max))
      (build-full-view-insert sEntityName sAttrName)
      (set-buffer sObjBuf))))     

;  (while (search-forward "eATTRIB" nil t) 
;    (and (not (search-forward "eDATARECORD"))
;           (search-forward "aNAME")
;           (skip-chars-forward " ")
;           (setq sAttrName (extract-word))
;           (set-buffer sLodView)
;           (goto-char (point-max))
;           (insert sAttrName "\n")
;           (set-buffer sObjBuf))))

;  (while (not (search-forward "eDATARECORD" 
;        (and (while (search-forward "eATTRIB" nil t)
;    (search-forward "aName")
;    (skip-chars-forward " ")
;    (setq sAttrName (extract-word))
;    (set-buffer sLodView)
;    (goto-char (point-max))
;    (insert sAttrName "\n")
;    (set-buffer sObjBuf))))))


    
;(while (not (eq sStop (setq sChk (extract-stop)))))


;; Utilities
(defun extract-word ()
  (let ((start (point)))
    (forward-word)
    (buffer-substring-no-properties start (point)))
)

(defun build-full-view-insert (sEntityName sAttrName)
  (insert (concat "\n\t" sObjName "." sEntityName "." sAttrName))
)

(defun jump-by-start-of-word ()
  (forward-word)
  (backward-word)
)

(defun extract-stop ()
  (jump-by-start-of-word) 
  (extract-word)
)
