(defun create-lod-viewer (sObj)
  (interactive "sLod Name: " sObj)
  (setq sObjName sObj)
  (message "Loading LOD: %s" sObjName)
  (setq sObjBuf (concat sObjName ".XOD"))
  ;  (setq sObjPath (concat "~/Projects/emacs/zeidon/src/" sObjBuf))
  (setq sObjPath (concat "C:\\lplr\\cheetah\\bin\\" sObjBuf))
  (if (not (bufferp sObjBuf))
      (find-file-noselect sObjPath))    
  (create-lod-view-buffer)
)

(defun create-lod-view-buffer ()
  (setq sLodView (concat "*LOD " sObjName " View*"))
  (if (get-buffer sLodView)
      (kill-buffer sLodView))
  (generate-new-buffer sLodView)
  (switch-to-buffer-other-window sLodView)
  (goto-char (point-min))
  (insert "--------------------------------------------------------------------------\n")
  (insert " Logical Object Definition Viewer for Emacs\n")
  (insert "--------------------------------------------------------------------------\n")
  (insert " Viewing LOD: " sObjName ".LOD\n")
  (insert "--------------------------------------------------------------------------\n\n")
  (build-entity-view)
  (set-buffer sLodView)
  (goto-char (point-max))
  (insert "\n--------------------------------------------------------------------------\n")
  (insert "Built using the Emacs LOD Viewer")
  (goto-char 1)
)

(defun build-entity-view ()
  (interactive)
  (if (not (bufferp sObjBuf))
      (set-buffer sObjBuf))
  (setq maxPos (goto-char (point-max)))
  (goto-char 1)
  (setq curPos (point))
  (setq eOBJECT "eOBJECT")
  (setq eENTITY "eENTITY")
  (setq eCHILDENTITY "eCHILDENTITY")
  (setq eATTRIB "eATTRIB")
  (setq aNAME "aNAME")
  (setq eDATARECORD "eDATARECORD")
  
  (while (< curPos maxPos)
    (forward-line 1)
    (beginning-of-line)
    (save-excursion
      (progn
        (setq sChk (extract-word))
        (cond ((equal sChk eOBJECT) (generate-obj-entity))
              ((equal sChk eENTITY) (generate-parent-entity))
              ((equal sChk eCHILDENTITY) (generate-child-entity))
              ((equal sChk eATTRIB) (get-entity-attribute))
              (t nil))))
    (setq curPos (point)))
  (kill-buffer sObjBuf)
)

(defun generate-obj-entity ()
  (search-forward aNAME)
  (skip-chars-forward " ")
  (setq value (extract-word))
  (if (not (bufferp sLodView))
       (set-buffer sLodView))
  (insert "Object: " value)
  (insert "\n---\n\tTODO: Properties for Object\n---\n\n")
  (set-buffer sObjBuf)
)

(defun generate-parent-entity ()
  (if (not (bufferp sObjBuf))
      (set-buffer sObjBuf))

   (progn
     (search-forward aNAME)
     (skip-chars-forward " ")
     (setq sEntityName (extract-word)))  

   (progn
     (set-buffer sLodView)
     (insert "Parent: " sEntityName)
     (insert "\n---\n\tTODO: Properties for Parent\n---") 
     (set-buffer sObjBuf))
)

(defun generate-child-entity ()
  (if (not (bufferp sObjBuf))
      (set-buffer sObjBuf))

  (progn
    (search-forward aNAME)
    (skip-chars-forward " ")
    (setq sEntityName (extract-word)))

  (progn 
    (set-buffer sLodView)
    (insert "\n-------------------------------------------\nChild: " sEntityName)
    (insert "\n---\n\tTODO: Properties for child\n---")
    (set-buffer sObjBuf))
)

(defun get-entity-attribute ()
  (progn
    (search-forward aNAME)
    (skip-chars-forward " ")
    (setq sAttrName (extract-word))
    (when (not (equal (upcase sAttrName) sAttrName))
      (progn
        (set-buffer sLodView)
        (build-full-view-insert sEntityName sAttrName)))
    (set-buffer sObjBuf))  
)

;; Utilities
(defun extract-word ()
  (let ((start (point)))
    (forward-word)
    (buffer-substring-no-properties start (point)))
)

(defun build-full-view-insert (sEntityName sAttrName)
  (insert (concat "\n\t" sObjName "." sEntityName "." sAttrName))
)