;; Define lod viewer for vml mode
(defun create-lod-view (sName)
  (interactive "sLod Name: " sName)
  (create-lod-view-buffer sName))

(defun create-lod-view-buffer(sName)
  (setq sLod (concat "*LOD " sName " View*"))
  (if (get-buffer sLod)
      (kill-buffer sLod))
  (generate-new-buffer sLod)
  (change-to-viewer sLod)
  (insert "--------------------------------------------------------------------------\n")
  (insert " Logical Object Definition Viewer for Emacs\n")
  (insert "--------------------------------------------------------------------------\n")
  (insert " Viewing LOD:-> ")
  (insert sName)(insert ".LOD\n")
  (insert "--------------------------------------------------------------------------\n\n")
  (insert "---\n\n")
  (load-lod sName)
  (message "Buffer window: %s" sLod)
  (build-lod-view-buffer sName sLod)
 )

(defun load-lod (sName)
  (setq szPath (concat "~/Projects/emacs/zeidon/src/" sName ".LOD"))
  (find-file-noselect szPath)
)

(defun build-lod-view-buffer(sName sLod)
  (setq szReadBuf (concat sName ".LOD"))
  (change-to-viewer szReadBuf)
  (search-forward "eLOD_EntityParent")
  (search-forward "aName")
  (skip-chars-forward " ")
  (setq szT (extract-word))
  (change-to-viewer sLod)
  (goto-char (point-max))
  (insert "Parent Entity: ") (insert szT)
  (newline)
)

(defun get-parent-entity (sReadBuf)
  
)

(defun extract-word ()
  (let ((begin (point)))
    (forward-word)
    (buffer-substring-no-properties begin (point)))
    ;(kill-ring-save begin (point)))
)

(defun get-lod-for-viewer ()
  (interactive)
  (extract-word)
  (change-to-viewer)
  (yank)
)

(defun change-to-viewer (sLodBuffer)
  (switch-to-buffer-other-window sLodBuffer)
  (goto-char (point-min))
)


